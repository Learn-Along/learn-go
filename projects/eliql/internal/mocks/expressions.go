// Code generated by MockGen. DO NOT EDIT.
// Source: internal/codegenerator/expressions.go

// Package mock_codegenerator is a generated GoMock package.
package mock_codegenerator

import (
	reflect "reflect"

	codegenerator "github.com/Learn-Along/learn-go/projects/eliql/internal/codegenerator"
	gomock "github.com/golang/mock/gomock"
)

// MockExpression is a mock of Expression interface.
type MockExpression struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionMockRecorder
}

// MockExpressionMockRecorder is the mock recorder for MockExpression.
type MockExpressionMockRecorder struct {
	mock *MockExpression
}

// NewMockExpression creates a new mock instance.
func NewMockExpression(ctrl *gomock.Controller) *MockExpression {
	mock := &MockExpression{ctrl: ctrl}
	mock.recorder = &MockExpressionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpression) EXPECT() *MockExpressionMockRecorder {
	return m.recorder
}

// accept mocks base method.
func (m *MockExpression) accept(visitor codegenerator.Visitor) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "accept", visitor)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// accept indicates an expected call of accept.
func (mr *MockExpressionMockRecorder) accept(visitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "accept", reflect.TypeOf((*MockExpression)(nil).accept), visitor)
}

// MockVisitor is a mock of Visitor interface.
type MockVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockVisitorMockRecorder
}

// MockVisitorMockRecorder is the mock recorder for MockVisitor.
type MockVisitorMockRecorder struct {
	mock *MockVisitor
}

// NewMockVisitor creates a new mock instance.
func NewMockVisitor(ctrl *gomock.Controller) *MockVisitor {
	mock := &MockVisitor{ctrl: ctrl}
	mock.recorder = &MockVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVisitor) EXPECT() *MockVisitorMockRecorder {
	return m.recorder
}

// visitArithmeticExpression mocks base method.
func (m *MockVisitor) visitArithmeticExpression(a *codegenerator.ArithmeticExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitArithmeticExpression", a)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitArithmeticExpression indicates an expected call of visitArithmeticExpression.
func (mr *MockVisitorMockRecorder) visitArithmeticExpression(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitArithmeticExpression", reflect.TypeOf((*MockVisitor)(nil).visitArithmeticExpression), a)
}

// visitColumnExpression mocks base method.
func (m *MockVisitor) visitColumnExpression(c *codegenerator.ColumnExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitColumnExpression", c)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitColumnExpression indicates an expected call of visitColumnExpression.
func (mr *MockVisitorMockRecorder) visitColumnExpression(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitColumnExpression", reflect.TypeOf((*MockVisitor)(nil).visitColumnExpression), c)
}

// visitColumnOrderExpression mocks base method.
func (m *MockVisitor) visitColumnOrderExpression(c *codegenerator.ColumnOrderExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitColumnOrderExpression", c)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitColumnOrderExpression indicates an expected call of visitColumnOrderExpression.
func (mr *MockVisitorMockRecorder) visitColumnOrderExpression(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitColumnOrderExpression", reflect.TypeOf((*MockVisitor)(nil).visitColumnOrderExpression), c)
}

// visitComparisonExpression mocks base method.
func (m *MockVisitor) visitComparisonExpression(c *codegenerator.ComparisonExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitComparisonExpression", c)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitComparisonExpression indicates an expected call of visitComparisonExpression.
func (mr *MockVisitorMockRecorder) visitComparisonExpression(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitComparisonExpression", reflect.TypeOf((*MockVisitor)(nil).visitComparisonExpression), c)
}

// visitGroupByExpression mocks base method.
func (m *MockVisitor) visitGroupByExpression(g *codegenerator.GroupByExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitGroupByExpression", g)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitGroupByExpression indicates an expected call of visitGroupByExpression.
func (mr *MockVisitorMockRecorder) visitGroupByExpression(g interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitGroupByExpression", reflect.TypeOf((*MockVisitor)(nil).visitGroupByExpression), g)
}

// visitJoinCondition mocks base method.
func (m *MockVisitor) visitJoinCondition(j *codegenerator.JoinCondition) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitJoinCondition", j)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitJoinCondition indicates an expected call of visitJoinCondition.
func (mr *MockVisitorMockRecorder) visitJoinCondition(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitJoinCondition", reflect.TypeOf((*MockVisitor)(nil).visitJoinCondition), j)
}

// visitJoinExpression mocks base method.
func (m *MockVisitor) visitJoinExpression(j *codegenerator.JoinExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitJoinExpression", j)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitJoinExpression indicates an expected call of visitJoinExpression.
func (mr *MockVisitorMockRecorder) visitJoinExpression(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitJoinExpression", reflect.TypeOf((*MockVisitor)(nil).visitJoinExpression), j)
}

// visitOrderByExpression mocks base method.
func (m *MockVisitor) visitOrderByExpression(o *codegenerator.OrderByExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitOrderByExpression", o)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitOrderByExpression indicates an expected call of visitOrderByExpression.
func (mr *MockVisitorMockRecorder) visitOrderByExpression(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitOrderByExpression", reflect.TypeOf((*MockVisitor)(nil).visitOrderByExpression), o)
}

// visitSelectExpression mocks base method.
func (m *MockVisitor) visitSelectExpression(s *codegenerator.SelectExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitSelectExpression", s)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitSelectExpression indicates an expected call of visitSelectExpression.
func (mr *MockVisitorMockRecorder) visitSelectExpression(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitSelectExpression", reflect.TypeOf((*MockVisitor)(nil).visitSelectExpression), s)
}

// visitUnionExpression mocks base method.
func (m *MockVisitor) visitUnionExpression(u *codegenerator.UnionExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitUnionExpression", u)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitUnionExpression indicates an expected call of visitUnionExpression.
func (mr *MockVisitorMockRecorder) visitUnionExpression(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitUnionExpression", reflect.TypeOf((*MockVisitor)(nil).visitUnionExpression), u)
}

// visitUnionSelectExpression mocks base method.
func (m *MockVisitor) visitUnionSelectExpression(u *codegenerator.UnionSelectExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitUnionSelectExpression", u)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitUnionSelectExpression indicates an expected call of visitUnionSelectExpression.
func (mr *MockVisitorMockRecorder) visitUnionSelectExpression(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitUnionSelectExpression", reflect.TypeOf((*MockVisitor)(nil).visitUnionSelectExpression), u)
}

// visitWhereExpression mocks base method.
func (m *MockVisitor) visitWhereExpression(w *codegenerator.WhereExpression) codegenerator.Output {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "visitWhereExpression", w)
	ret0, _ := ret[0].(codegenerator.Output)
	return ret0
}

// visitWhereExpression indicates an expected call of visitWhereExpression.
func (mr *MockVisitorMockRecorder) visitWhereExpression(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "visitWhereExpression", reflect.TypeOf((*MockVisitor)(nil).visitWhereExpression), w)
}

// MockOutput is a mock of Output interface.
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMockRecorder
}

// MockOutputMockRecorder is the mock recorder for MockOutput.
type MockOutputMockRecorder struct {
	mock *MockOutput
}

// NewMockOutput creates a new mock instance.
func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &MockOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutput) EXPECT() *MockOutputMockRecorder {
	return m.recorder
}
